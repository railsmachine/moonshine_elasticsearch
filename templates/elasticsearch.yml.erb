##################### ElasticSearch Configuration Example #####################

# This file contains an overview of various configuration settings,
# targeted at operations staff. Application developers should
# consult the guide at <http://elasticsearch.org/guide>.
#
# The installation procedure is covered at
# <http://elasticsearch.org/guide/reference/setup/installation.html>.
#
# ElasticSearch comes with reasonable defaults for most settings,
# so you can try it out without bothering with configuration.
#
# Most of the time, these defaults are just fine for running a production
# cluster. If you're fine-tuning your cluster, or wondering about the
# effect of certain configuration option, please _do ask_ on the
# mailing list or IRC channel [http://elasticsearch.org/community].

# Any element in the configuration can be replaced with environment variables
# by placing them in ${...} notation. For example:
#
# node.rack: ${RACK_ENV_VAR}

# See <http://elasticsearch.org/guide/reference/setup/configuration.html>
# for information on supported formats and syntax for the configuration file.


################################### Cluster ###################################

# Cluster name identifies your cluster for auto-discovery. If you're running
# multiple clusters on the same network, make sure you're using unique names.
#
cluster.name: <%= configuration[:elasticsearch][:cluster_name] || "elasticsearch" %>


#################################### Node #####################################

# Node names are generated dynamically on startup, so you're relieved
# from configuring them manually. You can tie this node to a specific name:
#
node.name: <%= configuration[:elasticsearch][:node_name] || Facter.value(:hostname).split(".").first %>

# Every node can be configured to allow or deny being eligible as the master,
# and to allow or deny to store the data.
#
# Allow this node to be eligible as a master node (enabled by default):
#
node.master: <%= elasticsearch_config_boolean(configuration[:elasticsearch][:master], true) %> 
#
# Allow this node to store data (enabled by default):
#
node.data: <%= elasticsearch_config_boolean(configuration[:elasticsearch][:data], true) %>

# You can exploit these settings to design advanced cluster topologies.
#
# 1. You want this node to never become a master node, only to hold data.
#    This will be the "workhorse" of your cluster.
#
# node.master: false
# node.data: true
#
# 2. You want this node to only serve as a master: to not store any data and
#    to have free resources. This will be the "coordinator" of your cluster.
#
# node.master: true
# node.data: false
#
# 3. You want this node to be neither master nor data node, but
#    to act as a "search load balancer" (fetching data from nodes,
#    aggregating results, etc.)
#
# node.master: false
# node.data: false

# Use the Cluster Health API [http://localhost:9200/_cluster/health], the
# Node Info API [http://localhost:9200/_cluster/nodes] or GUI tools
# such as <http://github.com/lukas-vlcek/bigdesk> and
# <http://mobz.github.com/elasticsearch-head> to inspect the cluster state.

# A node can have generic attributes associated with it, which can later be used
# for customized shard allocation filtering, or allocation awareness. An attribute
# is a simple key value pair, similar to node.key: value, here is an example:
#
# node.rack: rack314

# By default, multiple nodes are allowed to start from the same installation location
# to disable it, set the following:
# node.max_local_storage_nodes: 1


#################################### Index ####################################

# You can set a number of options (such as shard/replica options, mapping
# or analyzer definitions, translog settings, ...) for indices globally,
# in this file.
#
# Note, that it makes more sense to configure index settings specifically for
# a certain index, either when creating it or by using the index templates API.
#
# See <http://elasticsearch.org/guide/reference/index-modules/> and
# <http://elasticsearch.org/guide/reference/api/admin-indices-create-index.html>
# for more information.

# Set the number of shards (splits) of an index (5 by default):
#
index.number_of_shards: <%= configuration[:elasticsearch][:number_of_shards] || '5' %>

# Set the number of replicas (additional copies) of an index (1 by default):
#
index.number_of_replicas: <%= configuration[:elasticsearch][:number_of_replicas] || '1' %>

# Note, that for development on a local machine, with small indices, it usually
# makes sense to "disable" the distributed features:
#
# index.number_of_shards: 1
# index.number_of_replicas: 0

# These settings directly affect the performance of index and search operations
# in your cluster. Assuming you have enough machines to hold shards and
# replicas, the rule of thumb is:
#
# 1. Having more *shards* enhances the _indexing_ performance and allows to
#    _distribute_ a big index across machines.
# 2. Having more *replicas* enhances the _search_ performance and improves the
#    cluster _availability_.
#
# The "number_of_shards" is a one-time setting for an index.
#
# The "number_of_replicas" can be increased or decreased anytime,
# by using the Index Update Settings API.
#
# ElasticSearch takes care about load balancing, relocating, gathering the
# results from nodes, etc. Experiment with different settings to fine-tune
# your setup.

# Use the Index Status API (<http://localhost:9200/A/_status>) to inspect
# the index status.


#################################### Paths ####################################

# Path to directory containing configuration (this file and logging.yml):
#
# path.conf: /path/to/conf

# Path to directory where to store index data allocated for this node.
#
# path.data: /path/to/data
#
# Can optionally include more than one location, causing data to be striped across
# the locations (a la RAID 0) on a file level, favouring locations with most free
# space on creation. For example:
#
# path.data: /path/to/data1,/path/to/data2

<% if configuration[:elasticsearch][:path_data] %>
path.data: <%= configuration[:elasticsearch][:path_data] %>
<% end %>

# Path to temporary files:
#
# path.work: /path/to/work

# Path to log files:
<% if configuration[:elasticsearch][:path_logs] %>
path.logs: /path/to/logs
<% end %>

# Path to where plugins are installed:
#
# path.plugins: /path/to/plugins


#################################### Plugin ###################################

# If a plugin listed here is not installed for current node, the node will not start.
#
# plugin.mandatory: mapper-attachments,lang-groovy


################################### Memory ####################################

# ElasticSearch performs poorly when JVM starts swapping: you should ensure that
# it _never_ swaps.
#
# Set this property to true to lock the memory:
#
bootstrap.mlockall: <%= configuration[:elasticsearch][:mlockall] || true %>

# Make sure that the ES_MIN_MEM and ES_MAX_MEM environment variables are set
# to the same value, and that the machine has enough memory to allocate
# for ElasticSearch, leaving enough memory for the operating system itself.
#
# You should also make sure that the ElasticSearch process is allowed to lock
# the memory, eg. by using `ulimit -l unlimited`.


############################## Network And HTTP ###############################

# ElasticSearch, by default, binds itself to the 0.0.0.0 address, and listens
# on port [9200-9300] for HTTP traffic and on port [9300-9400] for node-to-node
# communication. (the range means that if the port is busy, it will automatically
# try the next port).

# Set the bind address specifically (IPv4 or IPv6):
#
# network.bind_host: 192.168.0.1

# Set the address other nodes will use to communicate with this node. If not
# set, it is automatically derived. It must point to an actual IP address.
#
# network.publish_host:

# Set both 'bind_host' and 'publish_host':
#

network.host: <%= configuration[:elasticsearch][:listen_address] %>

# Set a custom port for the node to node communication (9300 by default):
#

transport.tcp.port: <%= configuration[:elasticsearch][:transport_port] || '9300' %>

transport.tcp.connect_timeout: 10s

# Enable compression for all communication between nodes (disabled by default):
#
transport.tcp.compress: <%= elasticsearch_config_boolean(configuration[:elasticsearch][:tcp_compress], true) %>

# Set a custom port to listen for HTTP traffic:
#
http.port: <%= configuration[:elasticsearch][:http_port] || '9200' %>

# Set a custom allowed content length:
#
http.max_content_length: <%= configuration[:elasticsearch][:max_content_length] || '100mb' %>

# Disable HTTP completely:
#
http.enabled: <%= elasticsearch_config_boolean(configuration[:elasticsearch][:http_enabled], true) %>


################################### Gateway ###################################

# The gateway allows for persisting the cluster state between full cluster
# restarts. Every change to the state (such as adding an index) will be stored
# in the gateway, and when the cluster starts up for the first time,
# it will read its state from the gateway.

# There are several types of gateway implementations. For more information,
# see <http://elasticsearch.org/guide/reference/modules/gateway>.

<% unless configuration[:elasticsearch][:version].start_with?('2.') %>
# The default gateway type is the "local" gateway (recommended):
#
gateway.type: local
<% end %>

# Settings below control how and when to start the initial recovery process on
# a full cluster restart (to reuse as much local data as possible when using shared
# gateway).

# Allow recovery process after N nodes in a cluster are up:
#
gateway.recover_after_nodes: <%= configuration[:elasticsearch][:recover_after_nodes] || '1' %>

# Set the timeout to initiate the recovery process, once the N nodes
# from previous setting are up (accepts time value):
#
gateway.recover_after_time: <%= configuration[:elasticsearch][:recover_after_time] || '30s' %>

# Set how many nodes are expected in this cluster. Once these N nodes
# are up (and recover_after_nodes is met), begin recovery process immediately
# (without waiting for recover_after_time to expire):
#

gateway.expected_nodes: <%= configuration[:elasticsearch][:expected_nodes] || '1' %>



############################# Recovery Throttling #############################

# These settings allow to control the process of shards allocation between
# nodes during initial recovery, replica allocation, rebalancing,
# or when adding and removing nodes.

# Set the number of concurrent recoveries happening on a node:
#
# 1. During the initial recovery
#
# cluster.routing.allocation.node_initial_primaries_recoveries: 4
#
# 2. During adding/removing nodes, rebalancing, etc
#
# cluster.routing.allocation.node_concurrent_recoveries: 2

# Set to throttle throughput when recovering (eg. 100mb, by default 20mb):
#
# indices.recovery.max_bytes_per_sec: 20mb

# Set to limit the number of open concurrent streams when
# recovering a shard from a peer:
#
# indices.recovery.concurrent_streams: 5


################################## Discovery ##################################

# Discovery infrastructure ensures nodes can be found within a cluster
# and master node is elected. Multicast discovery is the default.

# Set to ensure a node sees N other master eligible nodes to be considered
# operational within the cluster. Set this option to a higher value (2-4)
# for large clusters (>3 nodes):
#
discovery.zen.minimum_master_nodes: <%= configuration[:elasticsearch][:minimum_master_nodes] || '1' %>

# Set the time to wait for ping responses from other nodes when discovering.
# Set this option to a higher value on a slow or congested network
# to minimize discovery failures:
#
discovery.zen.ping.timeout: <%= configuration[:elasticsearch][:ping_timeout] || '30s' %>
 
# See <http://elasticsearch.org/guide/reference/modules/discovery/zen.html>
# for more information.

# Unicast discovery allows to explicitly control which nodes will be used
# to discover the cluster. It can be used when multicast is not present,
# or to restrict the cluster communication-wise.
#
# 1. Disable multicast discovery (enabled by default):
#

<% if configuration[:elasticsearch][:multicast_group] %>
discovery.zen.ping.multicast.group: <%= configuration[:elasticsearch][:multicast_group] %>
<% end %>

discovery.zen.ping.multicast.enabled: <%= elasticsearch_config_boolean(configuration[:elasticsearch][:multicast_enabled], false) %>
# discovery.zen.ping.multicast.ping.enabled: <%= configuration[:elasticsearch][:multicast_enabled] %>

<% if configuration[:elasticsearch][:multicast_address] %>
discovery.zen.ping.multicast.address: <%= configuration[:elasticsearch][:multicast_address] %>
<% end %>

#
# 2. Configure an initial list of master nodes in the cluster
#    to perform discovery when new nodes (master or data) are started:
#
# discovery.zen.ping.unicast.hosts: ["host1", "host2:port", "host3[portX-portY]"]

<% if configuration[:elasticsearch][:unicast_hosts] && configuration[:elasticsearch][:unicast_hosts].is_a?(Array) %>
discovery.zen.ping.unicast.hosts: <%= configuration[:elasticsearch][:unicast_hosts].to_json %>
<% end %>

# EC2 discovery allows to use AWS EC2 API in order to perform discovery.
#
# You have to install the cloud-aws plugin for enabling the EC2 discovery.
#
# See <http://elasticsearch.org/guide/reference/modules/discovery/ec2.html>
# for more information.
#
# See <http://elasticsearch.org/tutorials/2011/08/22/elasticsearch-on-ec2.html>
# for a step-by-step tutorial.

################################## Scripting #################################

<% if configuration[:elasticsearch][:version].start_with?('2.') %>
script.inline: sandbox
script.indexed: sandbox
<% else %>
script.disable_dynamic: true # This should always be true.
<% end %>

################################## Slow Log ##################################

# Shard level query and fetch threshold logging.

index.search.slowlog.threshold.query.warn: <%= configuration[:elasticsearch][:query_warn] || '10s' %>
index.search.slowlog.threshold.query.info: <%= configuration[:elasticsearch][:query_info] || '5s' %>
index.search.slowlog.threshold.query.debug: <%= configuration[:elasticsearch][:query_debug] || '2s' %>
index.search.slowlog.threshold.query.trace: <%= configuration[:elasticsearch][:query_trace] || '500ms' %>

index.search.slowlog.threshold.fetch.warn: <%= configuration[:elasticsearch][:fetch_warn] || '1s' %>
index.search.slowlog.threshold.fetch.info: <%= configuration[:elasticsearch][:fetch_info] || '800ms' %>
index.search.slowlog.threshold.fetch.debug: <%= configuration[:elasticsearch][:fetch_debug] || '500ms' %>
index.search.slowlog.threshold.fetch.trace: <%= configuration[:elasticsearch][:fetch_trace] || '200ms' %>

index.indexing.slowlog.threshold.index.warn: <%= configuration[:elasticsearch][:index_warn] || '10s' %>
index.indexing.slowlog.threshold.index.info: <%= configuration[:elasticsearch][:index_info] || '5s' %>
index.indexing.slowlog.threshold.index.debug: <%= configuration[:elasticsearch][:index_debug] || '2s' %>
index.indexing.slowlog.threshold.index.trace: <%= configuration[:elasticsearch][:index_trace] || '500ms' %>

################################## GC Logging ################################

#monitor.jvm.gc.ParNew.warn: 1000ms
#monitor.jvm.gc.ParNew.info: 700ms
#monitor.jvm.gc.ParNew.debug: 400ms

#monitor.jvm.gc.ConcurrentMarkSweep.warn: 10s
#monitor.jvm.gc.ConcurrentMarkSweep.info: 5s
#monitor.jvm.gc.ConcurrentMarkSweep.debug: 2s

################################### Thread Pool ##############################

<% if configuration[:elasticsearch][:threadpool] %>

threadpool:
  <% configuration[:elasticsearch][:threadpool].each do |k,v| %>

  <%= k %>:
  <% v.each do |sk,sv| %>
    <%= sk %>: <%= sv %>
  <% end %>

  <% end %>

<% end %>
